/Author: Gloria Ooi, ID: 27467449
/Last updated: 13/04/17
/Task 2.1.7 - Complete Programme
LOAD NUM							/load integer value
STORE BASE							/store the value in BASE
JnS	USERINPUT						/start subroutine
LOAD ZERO
STORE I								/reset i = 0
LOAD NUM							/Load integer value
STORE BASE							/Store it in BASE
JnS LowerF							/Jump to subroutine
LOAD ZERO
STORE I								/reset i = 0
LOAD NUM							/Load integer value
STORE BASE							/Store it in BASE
JnS ROT13							/Jump to subroutine
END, 	HALT						/Exit programme

USERINPUT,	HEX 0				
LOOP1,		LOAD BASE				/load address
			ADD I					/add iterator
            STORE ADDR				/store address+iterator in ADDR
			INPUT					/request user input
            STOREI ADDR 			/store input in ADDR's value(which is an address)
            SKIPCOND 400			/if input==0,
            JUMP MAIN				/jump to MAIN
            JUMPI USERINPUT			/exit subroutine
MAIN,		LOAD I					/iterate I
            ADD ONE				
            STORE I
            JUMP LOOP1				/repeat loop
            
LowerF, 	HEX 0 					/subroutine name           
LOOP2, 		LOAD BASE				/Load address 
            ADD I					/Address+i
            STORE ADDR				/Store new address in ADDR
            CLEAR					/Clear AC
            LOADI ADDR				/Get value stored in ADDR address into AC
            STORE CURRENTVALUE		/Store value in AC in label CURRENTVALUE
            SKIPCOND 400			/If value stored ==0:
            JUMP UPPERCHECK1		/If value !=0, jump to CHECK1
            JumpI  LowerF			/Jump to return address
UPPERCHECK1, LOAD CURRENTVALUE		/Check 1: Check if uppercase
			SUBT NINEONE			/CURRENTVALUE - 91
			SKIPCOND 000			/if output <0  
        	JUMP MAIN2				/if not, jump to MAIN2
        	JUMP UPPERCHECK2		/jump to CHECK2
UPPERCHECK2, LOAD CURRENTVALUE		/Check 2: Check if not symbol
			SUBT SIXFOUR			/CURRENTVALUE - 64
       		SKIPCOND 800			/If positive
        	JUMP MAIN2				/If not positive, jump to MAIN2
        	JUMP LOWER   			/jump to LOWER
LOWER,  	LOAD CURRENTVALUE		/Change to lowercase
          	ADD THREETWO			/CURENTVALUE+32	
          	STOREI ADDR				/Store new CURRENTVALUE as lowercase
          	JUMP MAIN2				/JUMP TO MAIN2
MAIN2,		LOAD I					/Iterate: Load I
			ADD ONE					/I+1
			STORE I					/I = I=1
        	JUMP LOOP2
        
ROT13, 	HEX 0 						/subroutine name
LOOP3, 	LOAD BASE					/Load address 
		ADD I						/Address+i
        STORE ADDR					/Store new address in ADDR
        CLEAR						/Clear AC
        LOADI ADDR					/Get value stored in ADDR address into AC
        STORE CURRENTVALUE			/Store value in AC in label CURRENTVALUE
        SKIPCOND 400				/If value stored ==0:
        JUMP CHECK1					/If value !=0, jump to CHECK1
        JumpI  ROT13				/Jump to return address
CHECK1, LOAD CURRENTVALUE			/Check 1: Check if lowercase only
		SUBT ONETWOTHREE			/CURRENTVALUE - 123
		SKIPCOND 000				/if output <0  
        JUMP MAIN3					/if not, ITERATE
        JUMP CHECK2					/jump to CHECK2
CHECK2,	LOAD CURRENTVALUE			/Check 2: Check if lowercase only
		SUBT NINESIX				/CURRENTVALUE - 96
        SKIPCOND 800				/If positive
        Jump MAIN3					/If not positive, ITERATE
        JUMP CIPHER 				/jump to CIPHER
CIPHER, LOAD CURRENTVALUE			/cipher
		ADD ONETHREE				/CURENTVALUE+13
        STOREI ADDR					/Store new value
        SUBT ONETWOTWO				/CURRENTVALUE - 122
        SKIPCOND 800				/If positive
        JUMP MAIN3					/if not, jump to MAIN2
		JUMP STORE2					/if positive, store     
STORE2, ADD NINESIX
		STOREI ADDR					/Store again
MAIN3,	LOADI ADDR					/Get value stored in ADDR address into AC
        OUTPUT						
        LOAD I						/Iterate: Load I
		ADD ONE						/I+1
		STORE I						/I = I=1
        JUMP LOOP3

CURRENTVALUE,				HEX 0
SIXFOUR,					DEC 64
THREETWO,					DEC 32
NINEONE,					DEC 91  
ONETHREE,					DEC 13
NINESIX,					DEC 96
ONETWOTWO,					DEC 122
ONETWOTHREE,				DEC 123   
ADDR, 						HEX 0
ONE, 						DEC 1
BASE, 						HEX 0	/argument: address of string
ZERO, 						DEC 0
NUM, 						DEC 150        
I, 							DEC 0